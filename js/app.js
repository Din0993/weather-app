"use strict";

// Global Variables
let units = "metric";
let lat, lng;
let selectedCity = "";
let map;

// DOM Elements
const weatherAirSection = document.querySelector(".weather-air-info");
const searchSuggestions = document.querySelector(".navigation__suggestions");
const weatherFor3Days = document.querySelector(".weather3days");
const weatherDetailedToday = document.querySelector(".weather-detailed-today");
const searchSuggestionsItem = document.querySelector(
  ".navigation__suggestions__item"
);
const mapaOblaka = document.getElementById("mapid");

// Navigation Button for Temperature in Celsius. Also changes all other imperial units to metric.
document.querySelector(".navigation__c").addEventListener("click", function () {
  document.querySelector(".navigation__c").classList.add("active-temperature");
  document
    .querySelector(".navigation__f")
    .classList.remove("active-temperature");
  units = "metric";
  if (selectedCity !== "") {
    showWeather(selectedCity, units);
    showDailyWeather(selectedCity, units);
    showDetailedWeather(selectedCity, units);
  }
});
// Navigation Button for Temperature in Fahrenheit. Also changes all other metric units to imperial.
document.querySelector(".navigation__f").addEventListener("click", function () {
  document
    .querySelector(".navigation__c")
    .classList.remove("active-temperature");
  document.querySelector(".navigation__f").classList.add("active-temperature");
  units = "imperial";
  if (selectedCity !== "") {
    showWeather(selectedCity, units);
    showDailyWeather(selectedCity, units);
    showDetailedWeather(selectedCity, units);
  }
});

// Event listener on search box. Displays suggested cities based on users input.
document
  .querySelector(".navigation__search")
  .addEventListener("input", function (e) {
    searchSuggestions.style.display = "block";
    searchSuggestions.innerHTML = "";
    let markup = ``;
    const sugg = fetch(
      `https://autocomplete.geocoder.ls.hereapi.com/6.2/suggest.json?apiKey=dJ0x1HvGk6mNMeRwPX9x_pxUzvkKPi4ylT0Qqt4dy-k&query=${e.target.value}&`
    )
      .then((res) => res.json())
      .then((data) => {
        if (data.suggestions.length !== 0) {
          data.suggestions.forEach((item) => {
            if (
              item.address.hasOwnProperty("city") &&
              item.address.hasOwnProperty("country") &&
              item.address.hasOwnProperty("county")
            ) {
              markup = ``;
              markup += `
            <div class="navigation__suggestions__item">${item.address.city},${item.address.country},${item.address.county}</div>
            `;
              searchSuggestions.insertAdjacentHTML("beforeend", markup);
            }
          });
        } else {
          markup += `
            <div class="navigation__suggestions__item-no-results">No results for your input...</div>
            `;
          searchSuggestions.insertAdjacentHTML("beforeend", markup);
        }
      });
  });

document
  .querySelector(".navigation__search")
  .addEventListener("input", function (e) {
    if (e.target.value === "") searchSuggestions.style.display = "none";
  });

// Event listener on specific suggestion. Clicking on suggestion opens all weather information for selected city.
searchSuggestions.addEventListener("click", function (e) {
  if (e.target.className === "navigation__suggestions__item") {
    let selectedCityArr = e.target.textContent.split(",");
    selectedCity = selectedCityArr[0];
    showWeather(selectedCity, units);
    showDailyWeather(selectedCity, units);
    showDetailedWeather(selectedCity, units);
    document.querySelector(".navigation__search").value = "";
    document.querySelector(".footer").style.position = "relative";
  }
  searchSuggestions.style.display = "none";
});

// Event listener for Hourly Forecast Button. Displays hourly forecast for present day and next 2 days.
weatherAirSection.addEventListener("click", function (e) {
  if (e.target.classList.contains("weatherinfo__hourly-forecast")) {
    showHourlyForecast(selectedCity, units);
    document.querySelector(".weatherinfo__forecast__item1").style.display =
      "flex";
    document.querySelector(".weatherinfo__forecast__item2").style.display =
      "flex";
    document.querySelector(".weatherinfo__forecast__item3").style.display =
      "flex";
  }
  if (e.target.classList.contains("airinfo__detailed-btn")) {
    showDetailedAirQuality(selectedCity, units);
  }
});

// Function for that displays basic present weather information and air quality. Also displays two buttons for detailed weather quality and hourly forecast.
// Takes two arguments which user does not have to input. Argument for city is generated by user clicking on city suggestion. Units arguments is metric by default.
// User can change that to imperial by clicking on Fahrenheit icon on top right of navigation.
function showWeather(city, units) {
  let markup = ``;
  const weath = weather(city).then((data) => {
    weatherAirSection.innerHTML = "";
    let color;
    let aqiText;
    let aqi = Math.round(
      Math.max(
        data.current.air_quality.co / 60,
        data.current.air_quality.no2 / 2.1,
        data.current.air_quality.o3 / 5,
        data.current.air_quality.pm2_5 * 4.5,
        data.current.air_quality.so2 / 2.1
      )
    );

    if (aqi <= 50) {
      aqiText = "Good";
      color = "rgb(9, 255, 0)";
    } else if (aqi >= 51 && aqi <= 100) {
      aqiText = "Moderate";
      color = "yellow";
    } else if (aqi >= 101 && aqi <= 150) {
      aqiText = "Unhealthy for Sensitive Groups";
      color = "orange";
    } else if (aqi >= 151 && aqi <= 200) {
      aqiText = "Unhealthy";
      color = "red";
    } else {
      aqiText = "Hazardous";
      color = "rgb(78, 0, 0)";
    }

    markup = "";
    markup += `
      <section class="weather-air-info">
        <div class="weatherinfo">
          <h1 class="weatherinfo__city">${data.location.name}, ${
      data.location.region
    }, ${data.location.country} Weather</h1>
          <p class="weatherinfo__current-time">As of ${
            data.current.last_updated
          }</p>
          <div class="weatherinfo__flex-container">
            <div class="weatherinfo__temp-and-type">
              <p class="weatherinfo__temperature">${
                units === "metric" ? data.current.temp_c : data.current.temp_f
              }&#176;${units === "metric" ? "C" : "F"}</p>
              <p class="weatherinfo__type-of-weather">${
                data.current.condition.text
              }</p>
          </div>
          <img src="${data.current.condition.icon.replace(
            "64x64",
            "128x128"
          )}" class="weatherinfo__icon" />
        </div>

          <h1 class="airinfo__heading">Current Air Quality</h1>
          <p class="airinfo__aqi">
          AQI: <span style="color:${color}">${Math.round(
      aqi
    )} (${aqiText})</span>
          </p>
          <div class="airinfo__detailed-info">
            <div id="animation-container-co">
              <p class="progress-text-co"></p>
            </div>
            <div id="animation-container-no2">
              <p class="progress-text-no2"></p>
            </div>
            <div id="animation-container-o3">
              <p class="progress-text-o3"></p>
            </div>
            <div id="animation-container-pm2_5">
              <p class="progress-text-pm2_5"></p>
            </div>
            <div id="animation-container-so2">
              <p class="progress-text-so2"></p>
            </div>
          </div>
          <button class="airinfo__detailed-btn">Detailed Air Quality</button>
          <p class="airinfo__aqi-bottombb"></p>

        <div class="weatherinfo__forecast">
            <h1 class="airinfo__heading weatherinfo__forecast__heading">Hourly Forecast</h1>
            <p class="weatherinfo__forecast__item-date-main weatherinfo__forecast__item-date-main1"></p>
            <div class="weatherinfo__forecast__item weatherinfo__forecast__item1">
            </div>
            <p class="weatherinfo__forecast__item-date-main weatherinfo__forecast__item-date-main2"></p>
            <div class="weatherinfo__forecast__item weatherinfo__forecast__item2">
            </div>
            <p class="weatherinfo__forecast__item-date-main weatherinfo__forecast__item-date-main3"></p>
            <div class="weatherinfo__forecast__item weatherinfo__forecast__item3">
            </div>
        </div>

          <div class="weatherinfo__buttons">
            <button class="weatherinfo__hourly-forecast weather-btn">
              Hourly Forecast
            </button>
          </div>
        </div>
      </section>
      `;

    weatherAirSection.insertAdjacentHTML("beforeend", markup);
  });
}

// Function that gets called on pressing button "Detailed Air Quality".
// This function calls function AnimateCircle to display 5 circles with information about air quality.
function showDetailedAirQuality(city) {
  document.querySelector(".airinfo__detailed-info").style.display = "flex";
  const weath = weather(city).then((data) => {
    AnimateCircle(
      "animation-container-co",
      `${data.current.air_quality.co / 60 / 180}`,
      "progress-text-co",
      `CO :${Math.round(data.current.air_quality.co / 60)}`
    );
    AnimateCircle(
      "animation-container-pm2_5",
      `${(data.current.air_quality.pm2_5 * 4.5) / 180}`,
      "progress-text-pm2_5",
      `PM2.5 :${Math.round(data.current.air_quality.pm2_5 * 4.5)}`
    );
    AnimateCircle(
      "animation-container-no2",
      `${data.current.air_quality.no2 / 2.1 / 180}`,
      "progress-text-no2",
      `NO2 :${Math.round(data.current.air_quality.no2 / 2.1)}`
    );
    AnimateCircle(
      "animation-container-o3",
      `${data.current.air_quality.o3 / 5 / 180}`,
      "progress-text-o3",
      `O3 :${Math.round(data.current.air_quality.o3 / 5)}`
    );
    AnimateCircle(
      "animation-container-so2",
      `${data.current.air_quality.so2 / 1.85 / 180}`,
      "progress-text-so2",
      `SO2 :${Math.round(data.current.air_quality.so2 / 1.85)}`
    );
  });
  document.querySelector(".airinfo__detailed-btn").disabled = true;
}

// This function shows basic weather information for current day and next 2 days.
function showDailyWeather(city, units) {
  weatherFor3Days.style.display = "block";
  const weath = weather3days(city).then((data) => {
    weatherFor3Days.innerHTML = "";
    let markup = ``;
    markup += `
    <h1 class="weather3days__heading">Daily Forecast</h1>
    <div class="weather3days__container">
      <div class="weather3days__today">
        <h2 class="weather3days__today__heading">Today</h2>
        <p class="weather3days__today__temp-high">${
          units === "metric"
            ? data.forecast.forecastday[0].day.maxtemp_c
            : data.forecast.forecastday[0].day.maxtemp_f
        }&#176;</p>
        <p class="weather3days__today__temp-low">${
          units === "metric"
            ? data.forecast.forecastday[0].day.mintemp_c
            : data.forecast.forecastday[0].day.mintemp_f
        }&#176;</p>
        <img
          src=${data.forecast.forecastday[0].day.condition.icon}
          class="weather3days__today__icon"
        />
        <div class="weather3days__today__rain">
          <img
            src="/weather-icons/drop.png"
            class="weatherinfo__forecast__item-precip__icon"
          />
          <p class="weather3days__today__rain__text">${
            data.forecast.forecastday[0].day.daily_chance_of_rain
          }%</p>
        </div>
      </div>
      <div class="weather3days__tomorrow">
        <h2 class="weather3days__tomorrow__heading">${createDate(
          data.forecast.forecastday[1].date
        )}</h2>
        <p class="weather3days__tomorrow__temp-high">${
          units === "metric"
            ? data.forecast.forecastday[1].day.maxtemp_c
            : data.forecast.forecastday[1].day.maxtemp_f
        }&#176;</p>
        <p class="weather3days__tomorrow__temp-low">${
          units === "metric"
            ? data.forecast.forecastday[1].day.mintemp_c
            : data.forecast.forecastday[1].day.mintemp_f
        }&#176;</p>
        <img
          src=${data.forecast.forecastday[1].day.condition.icon}
          class="weather3days__tomorrow__icon"
        />
        <div class="weather3days__tomorrow__rain">
          <img
            src="/weather-icons/drop.png"
            class="weatherinfo__forecast__item-precip__icon"
          />
          <p class="weather3days__tomorrow__rain__text">${
            data.forecast.forecastday[1].day.daily_chance_of_rain
          }%</p>
        </div>
      </div>
      <div class="weather3days__day-after-tomorrow">
        <h2 class="weather3days__day-after-tomorrow__heading">${createDate(
          data.forecast.forecastday[2].date
        )}</h2>
        <p class="weather3days__day-after-tomorrow__temp-high">${
          units === "metric"
            ? data.forecast.forecastday[2].day.maxtemp_c
            : data.forecast.forecastday[2].day.maxtemp_f
        }&#176;</p>
        <p class="weather3days__day-after-tomorrow__temp-low">${
          units === "metric"
            ? data.forecast.forecastday[2].day.mintemp_c
            : data.forecast.forecastday[2].day.mintemp_f
        }&#176;</p>
        <img
          src=${data.forecast.forecastday[2].day.condition.icon}
          class="weather3days__day-after-tomorrow__icon"
        />
        <div class="weather3days__day-after-tomorrow__rain">
          <img
            src="/weather-icons/drop.png"
            class="weatherinfo__forecast__item-precip__icon"
          />
          <p class="weather3days__day-after-tomorrow__rain__text">${
            data.forecast.forecastday[2].day.daily_chance_of_rain
          }%</p>
        </div>
      </div>
    </div>
    `;
    weatherFor3Days.insertAdjacentHTML("beforeend", markup);
  });
}

// Function that gets called when user presses button Hourly Forecast.
// This function than displays hourly forecast for next 2 days.
function showHourlyForecast(city, units) {
  const hourlyForecastContainer = document.querySelector(
    ".weatherinfo__forecast"
  );
  const weath = weather3days(city).then((data) => {
    document.querySelector(".weatherinfo__forecast__heading").style.display =
      "block";
    document.querySelector(
      ".weatherinfo__forecast__item-date-main1"
    ).innerHTML = data.forecast.forecastday[0].date;
    document.querySelector(
      ".weatherinfo__forecast__item-date-main2"
    ).innerHTML = data.forecast.forecastday[1].date;
    document.querySelector(
      ".weatherinfo__forecast__item-date-main3"
    ).innerHTML = data.forecast.forecastday[2].date;
    let markup = ``;

    data.forecast.forecastday[0].hour.forEach((hour) => {
      if (new Date(hour.time) > new Date()) {
        let time = hour.time.split(" ")[1];
        markup += `
      <div class="weatherinfo__forecast__item-inside">
    <div class="weatherinfo__forecast__item-left">
    <div class=weatherinfo__forecast__item-date-and-temp>
    <p class="weatherinfo__forecast__item-date">${time}</p>
    <p class="weatherinfo__forecast__item-temperature-high-low">
      <span class="tempHighBold">${
        units === "metric" ? hour.temp_c : hour.temp_f
      }&#176;</span>
    </p>
    </div>
      <div class="weatherinfo__forecast__item-weather-type">
        <img
          src=${hour.condition.icon}
          class="weatherinfo__forecast__item-weather-type__icon"
        />
        <p class="weatherinfo__forecast__item-weather-type__text">
          ${hour.condition.text}
        </p>
      </div>
    </div>
    <div class="weatherinfo__forecast__item-right">
      <div class="weatherinfo__forecast__item-precip">
        <img
          src="/weather-icons/drop.png"
          class="weatherinfo__forecast__item-precip__icon"
        />
        <p class="weatherinfo__forecast__item-precip__text">${
          hour.chance_of_rain
        }%</p>
      </div>
      <div class="weatherinfo__forecast__item-wind-info">
        <img
          src="/weather-icons/wind.png"
          class="weatherinfo__forecast__item-wind-info__icon"
        />
        <p class="weatherinfo__forecast__item-wind-info__text">
          ${hour.wind_dir} ${
          units === "metric" ? hour.wind_kph : hour.wind_mph
        } ${units === "metric" ? "km/h" : "mp/h"}
        </p>
      </div>
    </div>
    </div>
    `;
      }
    });
    document
      .querySelector(".weatherinfo__forecast__item1")
      .insertAdjacentHTML("beforeend", markup);
    markup = "";

    data.forecast.forecastday[1].hour.forEach((hour) => {
      let time = hour.time.split(" ")[1];
      markup += `
        <div class="weatherinfo__forecast__item-inside">
      <div class="weatherinfo__forecast__item-left">
      <div class=weatherinfo__forecast__item-date-and-temp>
        <p class="weatherinfo__forecast__item-date">${time}</p>
        <p class="weatherinfo__forecast__item-temperature-high-low">
          <span class="tempHighBold">${
            units === "metric" ? hour.temp_c : hour.temp_f
          }&#176;</span>
        </p>
        </div>
        <div class="weatherinfo__forecast__item-weather-type">
          <img
            src=${hour.condition.icon}
            class="weatherinfo__forecast__item-weather-type__icon"
          />
          <p class="weatherinfo__forecast__item-weather-type__text">
            ${hour.condition.text}
          </p>
        </div>
      </div>
      <div class="weatherinfo__forecast__item-right">
        <div class="weatherinfo__forecast__item-precip">
          <img
            src="/weather-icons/drop.png"
            class="weatherinfo__forecast__item-precip__icon"
          />
          <p class="weatherinfo__forecast__item-precip__text">${
            hour.chance_of_rain
          }%</p>
        </div>
        <div class="weatherinfo__forecast__item-wind-info">
          <img
            src="/weather-icons/wind.png"
            class="weatherinfo__forecast__item-wind-info__icon"
          />
          <p class="weatherinfo__forecast__item-wind-info__text">
          ${hour.wind_dir} ${
        units === "metric" ? hour.wind_kph : hour.wind_mph
      } ${units === "metric" ? "km/h" : "mp/h"}
          </p>
        </div>
      </div>
      </div>
      `;
    });
    document
      .querySelector(".weatherinfo__forecast__item2")
      .insertAdjacentHTML("beforeend", markup);

    markup = "";
    data.forecast.forecastday[2].hour.forEach((hour) => {
      let time = hour.time.split(" ")[1];
      markup += `
        <div class="weatherinfo__forecast__item-inside">
      <div class="weatherinfo__forecast__item-left">
      <div class=weatherinfo__forecast__item-date-and-temp>
      <p class="weatherinfo__forecast__item-date">${time}</p>
      <p class="weatherinfo__forecast__item-temperature-high-low">
        <span class="tempHighBold">${
          units === "metric" ? hour.temp_c : hour.temp_f
        }&#176;</span>
      </p>
      </div>
        <div class="weatherinfo__forecast__item-weather-type">
          <img
            src=${hour.condition.icon}
            class="weatherinfo__forecast__item-weather-type__icon"
          />
          <p class="weatherinfo__forecast__item-weather-type__text">
            ${hour.condition.text}
          </p>
        </div>
      </div>
      <div class="weatherinfo__forecast__item-right">
        <div class="weatherinfo__forecast__item-precip">
          <img
            src="/weather-icons/drop.png"
            class="weatherinfo__forecast__item-precip__icon"
          />
          <p class="weatherinfo__forecast__item-precip__text">${
            hour.chance_of_rain
          }%</p>
        </div>
        <div class="weatherinfo__forecast__item-wind-info">
          <img
            src="/weather-icons/wind.png"
            class="weatherinfo__forecast__item-wind-info__icon"
          />
          <p class="weatherinfo__forecast__item-wind-info__text">
          ${hour.wind_dir} ${
        units === "metric" ? hour.wind_kph : hour.wind_mph
      } ${units === "metric" ? "km/h" : "mp/h"}
          </p>
        </div>
      </div>
      </div>
      `;
    });
    document
      .querySelector(".weatherinfo__forecast__item3")
      .insertAdjacentHTML("beforeend", markup);
  });
  document.querySelector(".weatherinfo__hourly-forecast").disabled = true;
}

// Function that displays detailed weather information for present day when user clicks on city suggestion when searching for city.
function showDetailedWeather(city, units) {
  const weath = weather3days(city).then((data) => {
    if (map !== undefined) {
      map.remove();
    }
    mapaOblaka.style.display = "block";
    initMap(data.location.lat, data.location.lon);
    weatherDetailedToday.style.display = "block";
    weatherDetailedToday.innerHTML = "";
    let markup = ``;
    markup += `
    <h1 class="weather-detailed-today__heading">
    Weather Today in ${data.location.name}, ${data.location.region}, ${
      data.location.country
    }
  </h1>
  <div class="weather-detailed-today__temp-and-sun">
    <div class="weather-detailed-today__temp">
      <p class="weather-detailed-today__temp__temperature">${
        units === "metric" ? data.current.feelslike_c : data.current.feelslike_f
      }&#176;</p>
      <p class="weather-detailed-today__temp__feels">Feels Like</p>
    </div>
    <div class="weather-detailed-today__sun">
      <div class="weather-detailed-today__sun-rise">
        <img
          src="https://img.icons8.com/office/40/000000/sunrise--v1.png"
          class="weather-detailed-today__sun-rise__icon"
        />
        <p class="weather-detailed-today__sun-rise__time">${
          data.forecast.forecastday[0].astro.sunrise
        }</p>
      </div>
      <div class="weather-detailed-today__sun-set">
        <img
          src="https://img.icons8.com/office/40/000000/sunset--v1.png"
          class="weather-detailed-today__sun-set__icon"
        />
        <p class="weather-detailed-today__sun-set__time">${
          data.forecast.forecastday[0].astro.sunset
        }</p>
      </div>
    </div>
  </div>
  <div class="weather-detailed-today__other">
    <div class="weather-detailed-today__other__left">
      <div class="weather-detailed-today__other__left__temp-high-low">
        <div
          class="
            weather-detailed-today__other__left__temp-high-low__icon-text
          "
        >
          <img
            src="/weather-icons/temperature-icon.gif"
            class="temperature-icon-gif"
          />
          <p class="weather-detailed-today__description">High / Low</p>
        </div>
        <p
          class="
            weather-detailed-today__other__left__temp-high-low__temperatures
          "
        >
        ${
          units === "metric"
            ? data.forecast.forecastday[0].day.maxtemp_c
            : data.forecast.forecastday[0].day.maxtemp_f
        }&#176; / ${
      units === "metric"
        ? data.forecast.forecastday[0].day.mintemp_c
        : data.forecast.forecastday[0].day.mintemp_f
    }&#176;
        </p>
      </div>

      <div class="weather-detailed-today__other__left__humidity">
        <div
          class="weather-detailed-today__other__left__humidity__icon-text"
        >
          <img
            src="https://img.icons8.com/external-justicon-lineal-justicon/64/000000/external-humidity-weather-justicon-lineal-justicon-1.png"
            class="humidity-icon"
          />
          <p class="weather-detailed-today__description">Humidity</p>
        </div>
        <p
          class="
            weather-detailed-today__other__left__humidity__percentage
          "
        >
          ${data.current.humidity} %
        </p>
      </div>

      <div class="weather-detailed-today__other__left__pressure">
        <div
          class="weather-detailed-today__other__left__pressure__icon-text"
        >
          <img
            src="https://img.icons8.com/ios-glyphs/60/000000/atmospheric-pressure--v1.png"
            class="pressure-icon"
          />
          <p class="weather-detailed-today__description">Pressure</p>
        </div>
        <p class="weather-detailed-today__other__left__pressure__mb">
        ${
          units === "metric"
            ? data.current.pressure_mb
            : data.current.pressure_in
        } ${units === "metric" ? "mb" : "in"}
        </p>
      </div>

      <div class="weather-detailed-today__other__left__visibility">
        <div
          class="
            weather-detailed-today__other__left__visibility__icon-text
          "
        >
          <img
            src="https://img.icons8.com/external-prettycons-lineal-prettycons/98/000000/external-view-essentials-prettycons-lineal-prettycons.png"
            class="visibility-icon"
          />
          <p class="weather-detailed-today__description">Visibility</p>
        </div>
        <p
          class="
            weather-detailed-today__other__left__visibility__distance
          "
        >
        ${units === "metric" ? data.current.vis_km : data.current.vis_miles} ${
      units === "metric" ? "km" : "miles"
    }
        </p>
      </div>
    </div>

    <div class="weather-detailed-today__other__right">
      <div class="weather-detailed-today__other__right__wind">
        <div
          class="weather-detailed-today__other__right__wind__icon-text"
        >
          <img
            src="https://img.icons8.com/ios/100/000000/wind--v1.png"
            class="temperature-icon-gif"
          />
          <p class="weather-detailed-today__description">Wind</p>
        </div>
        <p
          class="
            weather-detailed-today__other__right__wind__speed-direction
          "
        >
        ${data.current.wind_dir} ${
      units === "metric" ? data.current.wind_kph : data.current.wind_mph
    } ${units === "metric" ? "km/h" : "mp/h"}
        </p>
      </div>

      <div class="weather-detailed-today__other__right__uv">
        <div class="weather-detailed-today__other__right__uv__icon-text">
          <img
            src="https://img.icons8.com/external-justicon-lineal-justicon/64/000000/external-uv-index-weather-justicon-lineal-justicon-1.png"
            class="uv-icon"
          />
          <p class="weather-detailed-today__description">UV Index</p>
        </div>
        <p class="weather-detailed-today__other__right__uv__index">
          ${data.current.uv} of 10
        </p>
      </div>

      <div class="weather-detailed-today__other__right__clouds">
        <div
          class="weather-detailed-today__other__right__clouds__icon-text"
        >
          <img
            src="https://img.icons8.com/ios/50/000000/clouds.png"
            class="cloud-icon"
          />
          <p class="weather-detailed-today__description">Clouds</p>
        </div>
        <p
          class="weather-detailed-today__other__right__clouds__percentage"
        >
          ${data.current.cloud} %
        </p>
      </div>

      <div class="weather-detailed-today__other__right__precip">
        <div
          class="weather-detailed-today__other__right__precip__icon-text"
        >
          <img
            src="https://img.icons8.com/ios/100/000000/rain-sensor--v2.png"
            class="precip-icon"
          />
          <p class="weather-detailed-today__description">Precipitation</p>
        </div>
        <p class="weather-detailed-today__other__right__precip__mm">
          ${
            units === "metric" ? data.current.precip_mm : data.current.precip_in
          } ${units === "metric" ? "mm" : "in"}
        </p>
      </div>
    </div>
  </div>
    `;
    weatherDetailedToday.insertAdjacentHTML("beforeend", markup);
    markup = "";
  });
}

// Function that initializes the weather map with 4 different layers. Precipitation, Wind, Clouds and Temperature.
// Layers are drawn with Leaflet library.
function initMap(lat, lon) {
  let precip = L.tileLayer(
    "https://tile.openweathermap.org/map/precipitation_new/{z}/{x}/{y}.png?appid=f41dc8006687cc8b890fb20978a79a87",
    {
      maxZoom: 18,
      attribution: "",
    }
  );
  let clouds = L.tileLayer(
    "https://tile.openweathermap.org/map/clouds_new/{z}/{x}/{y}.png?appid=f41dc8006687cc8b890fb20978a79a87",
    {
      maxZoom: 18,
      attribution: "",
    }
  );
  let temps = L.tileLayer(
    "https://tile.openweathermap.org/map/temp_new/{z}/{x}/{y}.png?appid=f41dc8006687cc8b890fb20978a79a87",
    {
      maxZoom: 18,
      attribution: "",
    }
  );
  let windSpeed = L.tileLayer(
    "https://tile.openweathermap.org/map/wind_new/{z}/{x}/{y}.png?appid=f41dc8006687cc8b890fb20978a79a87",
    {
      maxZoom: 18,
      attribution: "",
    }
  );
  map = L.map("mapid", {
    center: [lat, lon],
    zoom: 7,
    layers: [precip, clouds],
  }).setView([lat, lon], 7);

  L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", {
    attribution:
      '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
  }).addTo(map);

  L.marker([lat, lon]).addTo(map);

  let baseMaps = {
    Precipitation: precip,
    Clouds: clouds,
    Temperature: temps,
    Wind: windSpeed,
  };
  L.control.layers(baseMaps).addTo(map);
}

// Function that creates date in format : Day Date (Thu 20).
function createDate(dt) {
  let week = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
  let date = new Date(dt);
  let dateStr = week[date.getDay()] + " " + date.getDate();
  return dateStr;
}

// Async function that fetches weather information from Weatherapi. Returns json type.
async function weather(city) {
  const currentWeather = await fetch(
    `https://api.weatherapi.com/v1/current.json?key=d40033a1cc484802891141718210610&q=${city}&aqi=yes`
  );
  const weatherData = currentWeather.json();

  return weatherData;
}

// Async function that fetches  weather information for 3 days from Weatherapi. Returns json type.
async function weather3days(city) {
  const weather3 = await fetch(
    `https://api.weatherapi.com/v1/forecast.json?key=d40033a1cc484802891141718210610&q=${city}&days=3&aqi=yes&alerts=yes`
  );
  const weatherData = weather3.json();
  return weatherData;
}

// Function that uses ProgressBar library for drawing circles. This function is used by another function that displays air quality information.
function AnimateCircle(container_id, animatePercentage, textContainer, text) {
  var startColor = "#42f596";
  var endColor = "#f54242";
  var txt = document.querySelector(`.${textContainer}`);
  txt.textContent = text;
  var element = document.getElementById(container_id);
  var circle = new ProgressBar.Circle(element, {
    color: startColor,
    trailColor: "#eee",
    trailWidth: 5,
    duration: 2000,
    easing: "bounce",
    strokeWidth: 5,
    from: { color: startColor, a: 0 },
    to: { color: endColor, a: 1 },

    step: function (state, circle) {
      circle.path.setAttribute("stroke", state.color);
    },
  });

  circle.animate(animatePercentage);
}
